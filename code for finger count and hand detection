import cv2
import numpy as np
import math
import time
from cvzone.HandTrackingModule import HandDetector
from IPython.display import display, Image, clear_output
import PIL.Image

cap = cv2.VideoCapture(0)

# Hand detector with a maximum of 2 hands
detector = HandDetector(maxHands=2)

# Constants for image processing and saving
offset = 20
imgSize = 300
folder = "Data/Y"
counter = 0

while True:
    # Capture frame from webcam
    success, img = cap.read()
    
    if not success:
        print("Error: Could not read frame from video device.")
        break
    
    # Detect hands
    hands, img = detector.findHands(img)

    if hands:
        totalFingers = 0  # Initialize total finger count

        for hand in hands:
            # Get the bounding box for the hand
            x, y, w, h = hand['bbox']

            # Create a white canvas
            imgWhite = np.ones((imgSize, imgSize, 3), np.uint8) * 255

            # Crop the image around the bounding box
            imgCrop = img[y - offset : y + h + offset, x - offset : x + w + offset]

            # Get the aspect ratio and resize
            aspectRatio = h / w
            if aspectRatio > 1:
                k = imgSize / h
                wCal = math.ceil(k * w)
                imgResize = cv2.resize(imgCrop, (wCal, imgSize))
                wGap = math.ceil((imgSize - wCal) / 2)
                imgWhite[:, wGap:wCal + wGap] = imgResize
            else:
                k = imgSize / w
                hCal = math.ceil(k * h)
                imgResize = cv2.resize(imgCrop, (imgSize, hCal))
                hGap = math.ceil((imgSize - hCal) / 2)
                imgWhite[hGap : hCal + hGap, :] = imgResize

            # Get the count of extended fingers
            fingers = detector.fingersUp(hand)
            count = fingers.count(1)  # Count fingers that are extended
            totalFingers += count  # Add to the total finger count

            # Display total fingers on the webcam feed
            cv2.putText(
                imgWhite, 
                f"Fingers: {totalFingers}", 
                (10, 30), 
                cv2.FONT_HERSHEY_SIMPLEX, 
                1, 
                (0, 0, 0), 
                2
            )

            # Display the cropped and white background images inline in Jupyter Notebook
            display(PIL.Image.fromarray(cv2.cvtColor(imgCrop, cv2.COLOR_BGR2RGB)))
            display(PIL.Image.fromarray(cv2.cvtColor(imgWhite, cv2.COLOR_BGR2RGB)))
            clear_output(wait=True)

    # Display the webcam output inline in Jupyter Notebook
    display(PIL.Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)))
    clear_output(wait=True)

    # Capture image when 's' is pressed
    key = cv2.waitKey(1)
    if key == ord("s"):
        counter += 1
        # Save the current white background image
        cv2.imwrite(f"{folder}/Image_{time.time()}.jpg", imgWhite)
        print("Image saved:", f"{folder}/Image_{time.time()}.jpg")

    # Exit on 'q'
    if key == ord("q"):
        break

# Release webcam and destroy OpenCV windows
cap.release()
cv2.destroyAllWindows()
